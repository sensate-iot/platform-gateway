/*
 * Request logging middleware.
 *
 * @author Michel Megens
 * @email  michel@michelmegens.net
 */

using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Prometheus;
using SensateIoT.Platform.Network.GatewayAPI.DTO;

namespace SensateIoT.Platform.Network.GatewayAPI.Middleware
{
	public class ErrorLoggingMiddleware
	{
		private readonly RequestDelegate _next;
		private readonly ILogger<ErrorLoggingMiddleware> m_logger;
		private readonly JsonSerializerSettings m_settings;
		private readonly Counter m_requestCounter;
		private readonly Counter m_requestExceptions;

		public ErrorLoggingMiddleware(RequestDelegate next, ILogger<ErrorLoggingMiddleware> logger)
		{
			this._next = next;
			this.m_logger = logger;

			this.m_requestCounter = Metrics.CreateCounter("gatewayapi_requests_total", "Total number of network API requests.");
			this.m_requestExceptions = Metrics.CreateCounter("gatewayapi_request_exceptions_total", "Total number of network API exceptions");

			this.m_settings = new JsonSerializerSettings {
				ContractResolver = new DefaultContractResolver {
					NamingStrategy = new CamelCaseNamingStrategy()
				},
				Formatting = Formatting.None
			};
		}

		public async Task Invoke(HttpContext ctx)
		{
			try {
				ctx.Request.EnableBuffering();
				await this._next(ctx).ConfigureAwait(false);
				this.m_requestCounter.Inc();
			} catch(Exception ex) {
				this.m_requestExceptions.Inc();
				var response = await this.RespondErrorAsync(ctx, "Unable to complete request.", 500)
					.ConfigureAwait(false);
				this.m_logger.LogError("Uncaught exception: {message}. Generated by request: {id}. Trace: {trace}",
									   ex.Message,
									   response.ResponseId.ToString("D"),
									   ex.StackTrace);
			}
		}

		private async Task<Response<string>> RespondErrorAsync(HttpContext ctx, string err, int http)
		{
			var response = new Response<string>();

			response.AddError(err);

			ctx.Response.Headers["Content-Type"] = "application/json";
			ctx.Response.StatusCode = http;

			await ctx.Response.WriteAsync(JsonConvert.SerializeObject(response, this.m_settings)).ConfigureAwait(false);
			return response;
		}
	}
}
